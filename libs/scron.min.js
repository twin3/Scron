class Scron{constructor(t){this.MAX_SETINTERVAL_VALUE=2147483647,this.MONTHS=[["January","Jan"],["February","Feb"],["March","Mar"],["April","Apr"],["May","May"],["June","Jun"],["July","Jul"],["August","Aug"],["September","Sep"],["October","Oct"],["November","Nov"],["December","Dec"]],this.DAYS=[["Sunday","Sun"],["Monday","Mon"],["Tuesday","Tue"],["Wednesday","Wed"],["Thursday","Thu"],["Friday","Fri"],["Saturday","Sat"]],this.KEY={ms:"MS",s:"SE",m:"MI",h:"HO",dom:"DM",mo:"MO",dow:"DW",st:"ST",en:"ET",mr:"MR"},this.RunStates={Running:1,Finished:2,Error:3},this.update(t||"")}dateStringToDate(t){try{if(t&&8===t.length){const e=Number(t.substring(0,2)),a=Number(t.substring(2,4))-1,s=Number(t.substring(4));return new Date(Date.UTC(s,a,e,0,0,0,0))}return null}catch(t){return console.log(t),null}}getIntRange(t){let e=[],a=0,s=0,n=t.split("-");if(2===n.length&&!isNaN(n[0])&&!isNaN(n[1])){a=Number(n[0]),s=Number(n[1]);for(let t=Math.min(a,s);t<=Math.max(a,s);t++)e.push(t)}return e}concatenateStringList(t,e){let a="";for(let s=0;s<t.length;s++)0===s?a+=t[s]:s===t.length-1?a+=` ${e||"and"} ${t[s]}`:a+=`, ${t[s]}`;return a}nth(t){if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}}nthAllIntsInString(t){let e="",a="";for(let s=0;s<t.length;s++){const n=t.charAt(s),i=t.charAt(s+1);-1!=="0123456789".indexOf(n)&&(a+=n),e+=n,a.length>0&&(!i||-1==="0123456789".indexOf(i))&&(e+=this.nth(Number(a)),a="")}return e}numberWithCommas(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}intArrayToRangeStrings(t,e){let a=[],s=[],n=null;t=t.sort((t,e)=>t-e);for(let i=0;i<t.length;i++){s.push(t[i]);let l=t[i+1]?t[i+1]-t[i]:-1;if(-1===l||n&&l!==n){if(s.length>3)n>1?a.push(`every ${n} ${e?e+" ":""}between and including the ${s[0]} and ${s[s.length-1]}`):a.push(`the ${s[0]} -> ${s[s.length-1]}${i<t.length-1&&e?" "+e:""}`);else for(let t=0;t<s.length;t++)a.push(`${s[t]}`);s=[]}n=l}return a}getRange(t,e){let a=[];try{if(t)for(let s=0;s<t.split(",").length;s++){const n=t.split(",")[s];let i=[];if(n&&"*"!==n&&"L"!==n)if(n.indexOf("-")>-1)i=this.getIntRange(n);else if(new RegExp("^[*]?/([1-9][0-9]{0,2})$").test(n)){let t=n.indexOf("*/")>-1?Number(n.substring(2)):Number(n.substring(1)),a=0,s=0;for(let t=0;t<e.length;t++)e[t]>a&&(a=e[t]);for(;s<=a;)s<=a&&i.push(s),s+=t}else n.endsWith("L")?i.push(Number(n.slice(0,-1))):i.push(Number(n));else i=e||[];for(let t=0;t<i.length;t++)-1===a.indexOf(i[t])&&a.push(i[t])}else a=e||[]}catch(t){}return a}static toDateFormat(t,e){const a=new Scron,s=new Date(t),n={dddd:a.DAYS[s.getUTCDay()][0],ddd:a.DAYS[s.getUTCDay()][0].substring(0,3),dd:("0"+s.getDate()).slice(-2),d:s.getDate().toString(),MMMM:a.MONTHS[s.getMonth()][0],MMM:a.MONTHS[s.getMonth()][0].substring(0,3),MM:("0"+(s.getMonth()+1)).slice(-2),M:(s.getMonth()+1).toString(),yyyy:s.getFullYear().toString(),yyy:s.getFullYear().toString().startsWith("0")||3===s.getFullYear().toString().length?s.getFullYear().toString().slice(-3):s.getFullYear().toString(),yy:s.getFullYear().toString().slice(-2),y:s.getFullYear().toString().slice(-2).startsWith("0")?s.getFullYear().toString().slice(-1):s.getFullYear().toString().slice(-2),HH:("0"+s.getHours()).slice(-2),H:s.getHours().toString(),hh:("0"+(s.getHours()%12==0?12:s.getHours()%12)).slice(-2),h:s.getHours()%12==0?12:s.getHours()%12,mm:("0"+s.getMinutes().toString()).slice(-2),m:s.getMinutes().toString(),ss:("0"+s.getSeconds().toString()).slice(-2),s:s.getSeconds().toString(),fff:("000"+s.getMilliseconds()).slice(-3),ff:s.getMilliseconds()>99?s.getMilliseconds().toString():("000"+s.getMilliseconds()).slice(-2),f:s.getMilliseconds()};let i="",l=[];for(let t=0;t<e.length;t++){const a=e.charAt(t);i+=a,(e.charAt(t+1)!==a||i.length>=4)&&(l.push(i),i="")}let r=!1;for(let t=l.length;t>=0;t--){const e=l[t];"^"===e?(r=!0,l.splice(t,1)):n.hasOwnProperty(e)&&(l[t]=n[e],r&&(l[t]=a.nthAllIntsInString(l[t]),r=!1))}return l.join("")}update(t){this.formatString=t,this.params={},this.params[this.KEY.ms]={index:0,original:"",default:[],value:[],strRange:"0-999",type:"range"},this.params[this.KEY.s]={index:1,original:"",default:[],value:[],strRange:"0-59",type:"range"},this.params[this.KEY.m]={index:2,original:"",default:[],value:[],strRange:"0-59",type:"range"},this.params[this.KEY.h]={index:3,original:"",default:[],value:[],strRange:"0-23",type:"range"},this.params[this.KEY.dom]={index:4,original:"",default:[],value:[],strRange:"1-31",type:"range"},this.params[this.KEY.mo]={index:5,original:"",default:[],value:[],strRange:"1-12",type:"range"},this.params[this.KEY.dow]={index:6,original:"",default:[],value:[],strRange:"0-6",type:"range"},this.params[this.KEY.st]={index:7,original:"",default:null,value:null,type:"date"},this.params[this.KEY.en]={index:8,original:"",default:null,value:null,type:"date"},this.params[this.KEY.mr]={index:8,original:"",default:null,value:null,type:"int"};for(let e=0;e<this.MONTHS.length;e++)for(let a=0;a<this.MONTHS[e].length;a++)t=t.replace(new RegExp(`${this.MONTHS[e][a]}`,"gi"),e);for(let e=0;e<this.DAYS.length;e++)for(let a=0;a<this.DAYS[e].length;a++)t=t.replace(new RegExp(`${this.DAYS[e][a]}`,"gi"),e);this.formatSplit=t.split(" ");for(let t in this.params)switch(this.params[t].original=this.formatSplit[this.params[t].index]||null,this.params[t].type){case"range":this.params[t].default=this.getIntRange(this.params[t].strRange),this.params[t].value=this.getRange(this.formatSplit[this.params[t].index],this.params[t].default);break;case"date":this.params[t].value=this.dateStringToDate(this.formatSplit[this.params[t].index]);break;case"int":this.params[t].value=isNaN(this.formatSplit[this.params[t].index])?null:Number(this.formatSplit[this.params[t].index])}this.params[this.KEY.en].value&&(this.params[this.KEY.mr].value=null),this.validateResult=this.validate()}toString(){let t="",e=!1,a="";if(!0!==this.validateResult)t=this.validateResult;else if(""===this.formatString.trim())t="No Scron entered";else{const s=this.params[this.KEY.ms],n=this.params[this.KEY.s],i=this.params[this.KEY.m],l=this.params[this.KEY.h],r=this.params[this.KEY.dom],h=this.params[this.KEY.mo],u=this.params[this.KEY.dow],g=this.params[this.KEY.st],o=this.params[this.KEY.en],d=this.params[this.KEY.mr];if(t+=a=g.value?`Runs from ${Scron.toDateFormat(g.value,"dddd d^ MMMM yyyy")}`:"Runs",s.value.length===s.default.length&&n.value.length===n.default.length&&i.value.length===i.default.length&&l.value.length===l.default.length&&r.value.length===r.default.length&&h.value.length===h.default.length&&u.value.length===u.default.length)t+=" every millisecond";else if(1===s.value.length&&n.value.length===n.default.length&&i.value.length===i.default.length&&l.value.length===l.default.length&&r.value.length===r.default.length&&h.value.length===h.default.length&&u.value.length===u.default.length)0===s.value[0]?t+=" once every second, precisely on the second":t+=` once every second at the ${s.value[0]}${this.nth(s.value[0])} millisecond`;else{if(h.value.length===h.default.length)t+="";else if(t+=" ",1===h.value.length)t+=`every ${this.MONTHS[h.value[0]-1][0]}`;else{let e=h.value.map((t,e,a)=>this.MONTHS[t-1][0]);t+=`every ${this.concatenateStringList(e)}`}if(u.value.length!==u.default.length)if(t+=" ",1===u.value.length)u.original.indexOf("L")>-1?t+=`on the last ${this.DAYS[u.value[0]][0]} of the month`:h.value.length===h.default.length?t+=`every ${this.DAYS[u.value[0]][0]}`:t+=`on ${this.DAYS[u.value[0]][0]}s`;else{let e=u.value.map((t,e,a)=>this.DAYS[t][0]);t+=`weeks ${this.concatenateStringList(e)}`}if("L"===r.original)t+=" on the last day of the month";else if(r.value.length!==r.default.length)if(1===r.value.length)t+=` on the ${r.value[0]}${this.nth(r.value[0])} of the month`;else{const e=this.nthAllIntsInString(this.concatenateStringList(this.intArrayToRangeStrings(r.value,"date"),"and"));t+=` on ${e.startsWith("the")||e.startsWith("every")?"":"the "}${e} of the month`}if(1===l.value.length&&0===l.value[0]&&1===i.value.length&&0===i.value[0]&&1===n.value.length&&0===n.value[0]&&1===s.value.length&&0===s.value[0])t+=" at midnight";else{if(l.value.length===l.default.length)i.value.length===i.default.length?t+="":t+=t===a?" each hour":", on each hour";else if(1===l.value.length&&0===l.value[0])t+=t===a?" ":", ",t+="at midnight";else{const e=this.nthAllIntsInString(this.concatenateStringList(this.intArrayToRangeStrings(l.value,"hour")));t+=t===a?" ":", ",t+=`on ${e.startsWith("the")||e.startsWith("every")?"":"the "}${e} hour`}if(t+=t===a?" ":", ",i.value.length===i.default.length)t+="every minute";else if(1===i.value.length&&0===i.value[0]&&1===n.value.length&&0===n.value[0]&&1===s.value.length&&0===s.value[0])e=!0,t+="precisely on the hour";else if(1===i.value.length&&0===i.value[0])t+="on the hour";else{const e=this.nthAllIntsInString(this.concatenateStringList(this.intArrayToRangeStrings(i.value,"minute")));t+=`on ${e.startsWith("the")||e.startsWith("every")?"":"the "}${e} minute`}if(!e){if(n.value.length===n.default.length)t+=", every second";else if(1===n.value.length&&0===n.value[0])i.value.length===i.default.length?t+=", precisely on the minute":t+="";else{const e=this.nthAllIntsInString(this.concatenateStringList(this.intArrayToRangeStrings(n.value,"second")));t+=`, on ${e.startsWith("the")||e.startsWith("every")?"":"the "}${e} second`}e||(s.value.length===s.default.length?(t+=" and every millisecond",1===n.value.length&&(t+=" within that second")):1===s.value.length&&0===s.value[0]?t+="":1===s.value.length?t+=` and on the ${s.value[0]}${this.nth(s.value[0])} millisecond`:t+=` and on ${this.nthAllIntsInString(this.concatenateStringList(this.intArrayToRangeStrings(s.value,"millisecond")))} millisecond`)}}}d.value&&d.value?t+=`, for ${this.numberWithCommas(d.value)} run${d.value>1?"s.":"."}`:o.value&&o.value?t+=`, until ${o.value.getUTCDate()}${this.nth(o.value.getUTCDate())} of ${this.MONTHS[o.value.getUTCMonth()][0]} ${o.value.getUTCFullYear()}.`:t+=", until the end of time."}return t}isValid(){return!0===this.validateResult}validate(){let t=[],e="[0-9]{1,3}";const a=`([*]|((${e}|${e}-${e}|[*]?/([12458]|10|2[05]|40|50|100|125|200|250|500))((,(${e}|${e}-${e}|[*]?/[1-9]{1,3}))*)))`,s=`([*]|((${e="([0-9]|[0-5][0-9])"}|${e}-${e}|[*]?/([123456]|1[025]|20|30))((,(${e}|${e}-${e}|[*]?/([123456]|1[025]|20|30)))*)))`,n=`([*]|((${e}|${e}-${e}|[*]?/([123456]|1[025]|20|30))((,(${e}|${e}-${e}|[*]?/([123456]|1[025]|20|30)))*)))`,i=`([*]|((${e="([0-9]|1[0-9]|2[0-3])"}|${e}-${e}|[*]?/([123468]|12))((,(${e}|${e}-${e}|[*]?/([123468]|12)))*)))`,l=`([*]|((([1-9]|[12][0-9]|30|31|L)|${e="([1-9]|[12][0-9]|30|31)"}-${e}|[*]?/1)((,(([1-9]|[12][0-9]|30|31|L)|${e}-${e}|[*]?/1))*)))`,r="([*]|(0[1-9]|[12][0-9]|30|31)(0[1-9]|1[0-2])(2[0-5][0-9][0-9]))",h=`([*]|(((${e="([0-6]|sun(day)?|mon(day)?|tue(sday)?|wed(nesday)?|thu(rsday)?|fri(day)?|sat(urday)?)"}L?)|${e}-${e}|[*]?/[123])((,(${e}|${e}-${e}|[*]?/[123]))*)))`,u=`([*]|((${e="(([1-9]|1[0-2])|jan|january|feb|february|mar|march|apr|april|may|jun|june|jul|july|aug|august|sep|september|oct|october|nov|november|dec|december)"}|${e}-${e}|[*]?/([12346]|12))((,(${e}|${e}-${e}|[*]?/([12346]|12)))*)))`,g=new RegExp(`^(${a}|(${a}[ ]${s})|(${a}[ ]${s}[ ]${n})|(${a}[ ]${s}[ ]${n}[ ]${i})|(${a}[ ]${s}[ ]${n}[ ]${i}[ ]${l})|(${a}[ ]${s}[ ]${n}[ ]${i}[ ]${l}[ ]${u})|(${a}[ ]${s}[ ]${n}[ ]${i}[ ]${l}[ ]${u}[ ]${h})|(${a}[ ]${s}[ ]${n}[ ]${i}[ ]${l}[ ]${u}[ ]${h}[ ]${r})|(${a}[ ]${s}[ ]${n}[ ]${i}[ ]${l}[ ]${u}[ ]${h}[ ]${r}[ ]([*]|([1-9][0-9]{0,5}|1000000)|(0[1-9]|[12][0-9]|30|31)(0[1-9]|1[0-2])(2[0-5][0-9][0-9]))))$`,"i").test(this.formatString),o=this.params[this.KEY.ms],d=this.params[this.KEY.s],m=this.params[this.KEY.m],$=this.params[this.KEY.h],f=this.params[this.KEY.dom],p=this.params[this.KEY.mo],c=this.params[this.KEY.dow],v=this.params[this.KEY.st],S=this.params[this.KEY.en],y=this.params[this.KEY.mr];if(!1===g){const e=new RegExp(`^${a}$`),g=new RegExp(`^${s}$`),E=new RegExp(`^${n}$`),T=new RegExp(`^${i}$`),Y=new RegExp(`^${l}$`),M=new RegExp(`^${u}$`),D=new RegExp(`^${h}$`),R=new RegExp(`^${r}$`),N=new RegExp("^([*]|(0[1-9]|[12][0-9]|30|31)(0[1-9]|1[0-2])(2[0-5][0-9][0-9]))$"),w=new RegExp("^([1-9][0-9]{0,5}|1000000)$");o.original&&!e.test(o.original)&&t.push("Milliseconds[1]"),d.original&&!g.test(d.original)&&t.push("Seconds[2]"),m.original&&!E.test(m.original)&&t.push("Minutes[3]"),$.original&&!T.test($.original)&&t.push("Hours[4]"),f.original&&!Y.test(f.original)&&t.push("Day of Month[5]"),p.original&&!M.test(p.original)&&t.push("Month[6]"),c.original&&!D.test(c.original)&&t.push("Day of Week[7]"),v.original&&!R.test(v.original)&&t.push("Start Date[8]"),(S.original&&!N.test(S.original)||y.value&&!w.test(y.value)||y.value&&(!v.original||"*"===v.original))&&t.push("End Date[9]")}else!y.value||v.original&&"*"!==v.original||t.push("End Date[9]");return!(t.length>0)||`Invalid ${this.concatenateStringList(t)}.`}nextRun(t){try{const e=this.params[this.KEY.ms].value,a=this.params[this.KEY.s].value,s=this.params[this.KEY.m].value,n=this.params[this.KEY.h].value,i=this.params[this.KEY.dom].value,l=this.params[this.KEY.mo].value,r=this.params[this.KEY.dow].value,h=this.params[this.KEY.st].value,u=this.params[this.KEY.en].value,g=this.params[this.KEY.mr].value;let o=0;const d=t?new Date(new Date(t).getTime()+1):h&&g?h:h&&new Date(h)>new Date?h:new Date,m=g?new Date:new Date(d),$={NOT:1,CONTINUE:2,RUNNABLE:3},f=t=>{if(g){return t<d?$.NOT:t>=m?$.RUNNABLE:$.CONTINUE}return t>=m&&(!d||t>=d)&&(!u||t<=u)?$.RUNNABLE:$.NOT};let p,c=null;t:for(let t=d.getUTCFullYear();t<=(u?u.getUTCFullYear():d.getUTCFullYear()+10);t++)if((p=new Date(d)).setUTCFullYear(t),f(p)!==$.NOT)for(let h=0;h<l.length;h++){(p=new Date(d)).setUTCDate(1),p.setUTCMonth(l[h]-1),p.setUTCFullYear(t);for(let u=0;u<i.length;u++){const d=new Date(t,l[h],0).getUTCDate();if(this.params[this.KEY.dom].original&&this.params[this.KEY.dom].original.indexOf("L")>-1){if(d!==i[u])continue;p.setUTCDate(i[u])}else p.setUTCDate(i[u]);if(f(p)!==$.NOT&&r.indexOf(p.getUTCDay())>-1&&(!this.params[this.KEY.dow].original||!this.params[this.KEY.dow].original.endsWith("L")||i[u]>d-7))for(let t=0;t<n.length;t++)if(p.setUTCHours(n[t]),f(p)!==$.NOT)for(let t=0;t<s.length;t++)if(p.setUTCMinutes(s[t]),f(p)!==$.NOT)for(let t=0;t<a.length;t++)if(p.setUTCSeconds(a[t]),f(p)!==$.NOT)for(let t=0;t<e.length;t++)switch(p.setUTCMilliseconds(e[t]),f(p)){case $.RUNNABLE:c=p;break t;case $.CONTINUE:if((o+=1)>=g)break t}}}return c||null}catch(t){return console.log(t),t}}run(t){const e=t.callback,a=!0===t.synchronous;let s=t.startDate?new Date(t.startDate).getTime():null,n=null;setTimeout(()=>{const s=()=>{this.run({...t,startDate:null})},i=(t,n)=>{let i={state:t,run:!0===a?s:null};n&&(i.error=n),e(i),!0!==a&&t===this.RunStates.Running&&s()};if(n=this.nextRun())if(n instanceof Date)if(n.getTime()>(new Date).getTime()+this.MAX_SETINTERVAL_VALUE)i(this.RunStates.Error,`Start date too far in the future. Please select a date less than ${Scron.toDateFormat(new Date((new Date).getTime()+this.MAX_SETINTERVAL_VALUE),"dddd dd^ MMMM yyyy HH:mm:ss:fff")}`);else{const t=n-(new Date).getTime();t>-1?setTimeout(()=>{i(this.RunStates.Running)},t):s()}else i(this.RunStates.Error,n);else i(this.RunStates.Finished)},s?Math.max(0,new Date(s).getTime()-(new Date).getTime()):0)}}module.exports=Scron;